# Athom smart plugs are great way to control and monitor the energy usage of devices,
# but its relay-based switch turns off momentarily when the device is restarted or updated,
# which is an issue for plugged in devices that require uninterrupted power like PCs.
# This relay-less version is perfect for those situations.
#
# Cloned and modified from https://github.com/athom-tech/athom-configs/blob/main/athom-without-relay-plug.yaml
dashboard_import:
  package_import_url: github://teekennedy/home-assistant/esphome/packages/athom-energy-monitor.yaml

substitutions:
  name: "athom-energy-monitor-plug"
  friendly_name: "Athom Energy Monitor"
  # Allows ESP device to be automatically lined to an 'Area' in Home Assistant. Typically used for areas such as 'Lounge Room', 'Kitchen' etc
  room: ""
  device_description: "athom esp8285 energy monitor plug"
  sensor_update_interval: "10s"
  # Define logging level: NONE, ERROR, WARN, INFO, DEBUG (Default), VERBOSE, VERY_VERBOSE
  log_level: "INFO"
  # Hide the ENERGY sensor that shows kWh consumed, but with no time period associated with it. Resets when device restarted and reflashed.
  hide_energy_sensor: "false"

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"
  comment: "${device_description}"
  area: "${room}"
  name_add_mac_suffix: true
  min_version: 2024.6.0
  project:
    name: "teekennedy.athom-energy-monitor"
    version: "1.0.0"
 
esp8266:
  board: esp8285
  restore_from_flash: true

preferences:
  flash_write_interval: 5min

api:

ota:
  - platform: esphome

logger:
  level: ${log_level}
  baud_rate: 0

uart:
  rx_pin: RX
  baud_rate: 4800
  parity: EVEN

globals:
  - id: total_energy
    type: float
    restore_value: yes
    initial_value: '0.0'

binary_sensor:
  - platform: status
    name: "Status"
    entity_category: diagnostic    

  - platform: gpio
    pin:
      number: 5
      mode: INPUT_PULLUP
      inverted: true
    name: "Button"
    disabled_by_default: true
    on_multi_click:
      - timing:
        - ON for at least 4s
        then:
          - button.press: Reset

sensor:
  - platform: uptime
    name: "Uptime Sensor"
    id: uptime_sensor
    entity_category: diagnostic
    internal: true

  #  Creates a sensor showing when the device was last restarted
  - platform: uptime
    type: timestamp
    name: 'Last Restart'
    id: device_last_restart

  # Reports the WiFi signal strength/RSSI in dB
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: diagnostic

  # Reports the WiFi signal strength in %
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: diagnostic
    device_class: ""

  - platform: cse7766
    id: athom_cse7766
    current:
      name: "Current"
      filters:
        - throttle_average: ${sensor_update_interval}
        - lambda: if (x < 0.060) return 0.0; else return x;   #For the chip will report less than 3w power when no load is connected

    voltage:
      name: "Voltage"
      filters:
        - throttle_average: ${sensor_update_interval}

    power:
      name: "Power"
      id: power_sensor
      filters:
        - throttle_average: ${sensor_update_interval}
        - lambda: if (x < 3.0) return 0.0; else return x;    #For the chip will report less than 3w power when no load is connected

    energy:
      name: "Energy"
      id: energy
      unit_of_measurement: kWh
      internal: ${hide_energy_sensor}
      filters:
        - throttle: ${sensor_update_interval}
        # Multiplication factor from W to kW is 0.001
        - multiply: 0.001
      on_value:
        then:
          - lambda: |-
              static float previous_energy_value = 0.0;
              float current_energy_value = id(energy).state;
              id(total_energy) += current_energy_value - previous_energy_value;
              previous_energy_value = current_energy_value;
              id(total_energy_sensor).update();


    apparent_power:
      name: "Apparent Power"
      filters:
        - throttle_average: ${sensor_update_interval}
    reactive_power:
      name: "Reactive Power"
      filters:
        - throttle_average: ${sensor_update_interval}
    power_factor:
      name: "Power Factor"
      filters:
        - throttle_average: ${sensor_update_interval}

  - platform: template
    name: "Total Energy"
    id: total_energy_sensor
    unit_of_measurement: kWh
    device_class: "energy"
    state_class: "total_increasing"
    icon: "mdi:lightning-bolt"
    accuracy_decimals: 3
    lambda: |-
      return id(total_energy);
    update_interval: ${sensor_update_interval}

button:
  - platform: restart
    name: "Restart"
    internal: true
    entity_category: config

  - platform: factory_reset
    name: "Factory Reset"
    id: Reset
    internal: true
    entity_category: config

  - platform: safe_mode
    name: "Safe Mode"
    internal: true
    entity_category: config

light:
  - platform: status_led
    name: "Status LED"
    id: blue_led
    disabled_by_default: true
    pin:
      inverted: true
      number: GPIO13

time:
  - platform: homeassistant
    id: homeassistant_time
